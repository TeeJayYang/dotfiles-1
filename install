#!/usr/bin/env python

import os
import glob
import sys
import yaml
import argparse
import subprocess
import shlex

def readOptions () :
    parser = argparse.ArgumentParser(description="Installation script for dotfiles.")
    parser.add_argument("-d", dest="dir",  help="root directory of dotfiles", metavar="folder")
    parser.add_argument("-c", dest="conf", help="config file for symlinking and installing", metavar="file")
    parser.add_argument("-p", dest="prompt", help="prompt user before installing package", action="store_true")
    parser.add_argument("-u", dest="update", help="only update symlinks", action="store_true")

    return parser.parse_args()

def expandPath (path) :
    if path == None:
        return None
    return os.path.abspath(os.path.expanduser(path))

if __name__ == "__main__":
    args = readOptions()
    dir = expandPath(args.dir) or os.path.dirname(os.path.realpath(__file__))
    conf = expandPath(args.conf) or os.path.join(dir, "config.yaml")

    stream = open(conf, "r")
    packages = yaml.load(stream)

    for package in packages:
        if args.prompt:
            if raw_input("\nInstall {} (Y/n)? ".format(package)).strip() == "n":
                continue
        else:
            print "\nInstalling {}".format(package)

        linkLocations = {}
        overwrite = True
        scripts = []
        dependencies = []

        if not 'link' in packages[package]:
            raise ValueError('No link attribute set.')
        elif isinstance(packages[package]['link'], dict):
            linkLocations = packages[package]['link']
        else:
            linkLocations = {
                "*": packages[package]['link'],
                ".*": packages[package]['link']
            }

        if 'overwrite' in packages[package]:
            overwrite = packages[package]['overwrite']

        if 'scripts' in packages[package]:
            scripts = packages[package]['scripts']

        if 'dependencies' in packages[package]:
            dependencies = packages[package]['dependencies']

        symlinkedFiles = set()
        for pattern, path in linkLocations.iteritems():
            location = expandPath(path)
            subprocess.call(["mkdir", "-pv", location])
            for filename in glob.iglob(os.path.join(dir, package, pattern)):
                basename = os.path.basename(filename)
                if basename in symlinkedFiles:
                    continue
                symlinkedFiles.add(basename)

                if overwrite:
                    subprocess.call(["ln", "-sfv", filename, expandPath(location)])
                else:
                    subprocess.call(["ln", "-sv", filename, expandPath(location)])

        if not args.update:
            for script in scripts:
                subprocess.call([os.path.expanduser(token) for token in shlex.split(script)])

            for dependency in dependencies:
                print "sudo apt-get install {}".format(dependency)
